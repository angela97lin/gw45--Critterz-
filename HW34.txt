Ida Huang
git@github.com:angela97lin/gw45-Critterz.git
APCS Period 9
HW33 -- GridWorld, Part 4
2014-04-29

Do You Know?
Set 7

1. The Critters class implements act, getActors, processActors, getMoveLocations, selectMoveLocations, and makeMove methods.

2. The five basic actions common to all critters when they act are getActors, processActors, getMoveLocations, selectMoveLocations, and makeMove. 

3. The getActors method of the Critter class gets a list of all neighboring actors. Subclasses of Critter may inherit the behavior but they may also alternatively decide to process a different set of actors and override the getActors method. 

4. Critter could process actors by examining them, moving them, and eating them. 
5. In order to make a Critter move, you need to call getMoveLocations, selectMoveLocation, and makeMove. getMoveLocations method returns all empty adjacent locations. The selectMoveLocation selects a location from one of them at random. Then a call to makeMove to move the critter. 

6. Critter is a subclass of Actor and so the default constructor of Critter will just call super() to Actor's default constructor.

Set 8

1. act causes ChameleonCritter to act differently from Critter even though ChameleonCritter does not override act because the processActors and makeMove methods called in act have been overridden. 

2. The makeMove method of ChameleonCritter calls super.makeMove because it is the same thing that Critter would to in order to move to the new location. 

3. In makeMove
   if (!oldLoc.equals(loc)) {
           Flower flo = new Flower(getColor());
	   flo.putSelfInGrid(getGrid(), oldLoc);
}

4. Because ChameleonCritter process those same Actors so no change in getActors is necessary.

5. getLocation is implemented by Actor class. 

6. The critter access its own grid by calling getGrid method. 

Set 9

1. CrabCritter does not override the processActors method because the one that is inherited from the Critter class is enough. They are going to process the same actors.

2. CrabCritter's getActors method details that you first check the locations in front of you and 45 degrees turn each way. When you processActors, the critters eats (removes) the bug. 

3. getLocationsInDirections method is used in CrabCritter because provides valid adjacent locations of this critter in different directions. 

4.(4,4), (4,5), (4,3)

5. CrabCritter and Critter are similar in that they randomly choose the next location of possible moves. They are different because the CrabCritter is only going to look at Actors directly in fron of it. 

6. CrabCritter turns when the parameter in makeMove is the same as the current location. 

7. CrabCritter objects don't eat each other because the methods only eat actors. 

Group Activity

1. Specify: class BabyCrit extends Critter
   BabyCrit only looks at the neighbor in 1 unit away from it. It chooses one at random and removes it from the grid by placing itself on the grid and leaving a flower in its previous location. BabyCrit tries to find all the actors.    
