Angela Lin
git@github.com:angela97lin/gw45-Critterz.git
APCS pd 9
HW34: Buggin' Out--GridWorld, Part 4
2014-04-29

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Do You Know? Set 7

1) What methods are implemented in Critter?
 getActors()
 processActors(ArrayList<Actor> actors)
 getMoveLocations()
 selectMoveLocation(ArrayList<Location> locs)
 makeMove(Location loc)
 act()

2) What are the five basic actions common to all critter when they act?
 -To check for neighboring critters
 -To process the neighboring critters (if any)
 -To generate the set of locations to which it may move
 -To set its destination/next move
 -To move

3) Should subclass of Critter override the getActors method? Explain.
 Yes, it should override the getActors method because now Critter may have to look for specific critters (probably of the same subclass) and take action with them, rather than looking for all types of Critter.

4) Describe three ways that a Critter could process actors.
 -Eat actors in the list
 -Move the actors in the list
 -Set the color of the actors in the list

5) What three methods must be invoked to make the critter move? Explain each of these methods.
 First, the getMoveLocations() method will be called, returning a list of locations adjacent to the Critter that are empty. Then, the selectMoveLocations(ArrayList<Location> locs) method randomly selects one of these empty locations as the Critter's destination and returns that destination. Finally, the Critter actually moves to this returned set destination when the makeMove(Location loc) method is called upon.

6) Why is there no Critter constructor?
 Critter extends and is a subclass of the Actor class. Hence, it is not necessary to specify a Critter constructor; rather, we are able to automatically use the Actor's constructor instead.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Do You Know? Set 8

1) Why does act cause a ChameleonCritter to act differently from a Critter even though ChameleonCritter does not override act?
 Although ChameleonCritter does not override act, it does override other methods, such as makeMove(Location loc) and processActors(ArrayList<Actor> actors). Hence, when act calls on these methods, a ChameleonCritter will act differently from a Critter.

2) Why does the makeMove method of ChameleonCritter call super.makeMove?
 The ChameleonCritter's makeMove(Location loc) method overrides the superclass's makeMove method. It first sets the direction of the ChameleonCritter to that in which it is moving in the direction of. Then, it calls  on super.makeMove in order to make the ChameleonCritter act like a regular Critter.

3) How would you make the ChameleonCritter drop flowers in its old location when it moves?
 Similar to the Critter class, have a variable store the ChameleonCritter's current position. Then, if after calling makeMove(Location loc) the ChameleonCritter has moved, then place a flower at the position of the variable.

4) Why doesn't ChameleonCritter override the getActors method?
 There is no need to override the getActors method from the Actor class since the ChameleonCritter is processing the basic list of Critters.

5) Which class contains the getLocation method?
 The Actor class contains the getLocation() method. 

6) How can a Critter access its own grid?
 A Critter can access its own grid by calling this.getGrid(), a method inherited from the Actor superclass.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Do You Know? Set 9

1) Why doesn't CrabCritter override the processActors method?
 A CrabCritter does not override the processActors method from its superclass because it behaves just like its superclass. Hence, it is unnecessary to override it.

2) Describe the process a CrabCritter uses to find and eat other actors. Does it always eat all neighboring actors? Explain.
 The CrabCritter's getActors method only processes the spaces in front of, in left-front of, and in right-front of the CrabCritter. When it calls processActors, only the Critteres in front of, in left-front of, and/or in right-front of are eaten by the CrabCritter.

3) Why is the getLocationsInDirections method used in CrabCritter?
 The getLocationsInDirections method is used in CrabCritter because it, given an array of directions, returns valid adjacent locations of this Critter.

4) If a CrabCritter has location (3,4) and faces south, what are the possible locations for actors that are returned by a call to the getActors method?
 -(4,3)
 -(4,4)
 -(4,5)

5) What are the similarities and differences between the movements of a CrabCritter and a Critter?
 A CrabCritter and a Critter are similar in that both Critters (unlike the ChameleonCritter) do not turn to face the direction that they are moving in. Furthermore, they both use process the Actors adjacent to them in order to randomly choose a direction to move in. However, the CrabCritter is only able to move left and right and turns 90 degrees when it cannot do either. In addition, while the Critter is able to check all of the adjacent spots around it, the CrabCritter is only able to check the three adjacent spots in front: the front, front-left, front-right.

6) How does a CrabCritter determine when it turns instead of moving?
 If the loc parameter in makeMove(Location loc) is equal to the location it is currently at (if (loc.equals(getLocation()))), then a CrabCritter must turn either left or right.

7) Why don't the CrabCritter objects eat each other?
 The CrabCritter objects don't eat each other because the processActors method inherited from the Critter superclass removes Actors that are not rocks anc critters. Since a CrabCritter is a subclass of the Critter class, CrabCritter objects will not be removed from evoking this method.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A new type of Critter has appeared on the scene:
BoxCritter Specs:
 BoxCritter extends class Critter. Rather than processing all eight adjacent locations around the Critter, it only processes the front-left, front-right, back-left, and back-right positions. If it is unable to move, the BoxCritter should, like the CrabCritter, randomly choose to turn left or right. When all actors are cleared, it will leave behind a flower in its past positions.

BoxCritter Test Cases:
 -Check simply if it can remove/process only the objects at the specified adjacent positions (corners), rather than all the adjacent positions.
 -Check that the BoxCritter, when unable to move, will randomly turn left or right.
 -Check that if there are no other Actors on the grid, the BoxCritter will begin to leave flowers in its path. Similarly, if a new Actor is introduced, then the BoxCritter will stop leaving flowers in its path.


